===========================================================================
                           PLDI '15 Review #41A
                     Updated 1 Dec 2014 9:06:37am EST
---------------------------------------------------------------------------
            Paper #41: Compositional Certified Resource Bounds
---------------------------------------------------------------------------

                      Overall merit: 2. Accept
                         Conviction: 1. High

                         ===== Paper summary =====

The paper presents a resource bounds analysis for Clight (CompCert)
programs. The analysis computes bounds that are sums of terms of the
form q * |x-y|, where x,y are pairs of input variables or constants.
The analysis extracts Hoare-style constraints (that model changes in
potential) from a program, and uses a linear programming solver to solve
them. The analysis is compositional in that it can summarize procedures.
The analysis has a machine-checked soundness proof, and has been experimentally
evaluated against competing techniques.

                        ===== Points in favor =====

1 novel use of pairs of variables in a potential-style analysis
2 automatic technique that beats existing techniques significantly
3 machine-checked soundness proof
4 suggestion of user-interaction using logical variables
5 paper is clearly written with helpful examples

                        ===== Points against =====

- analysis is limited to linear bounds

                      ===== Comments for author =====

The paper makes multiple strong contributions (see 1,2,3 in Points in favor).

Point in favor 4 is weaker because the technique depends on correctness of the
user-defined operations on the logical variables, and correctness is not
checked.

page 2: the sentence "... of sizes [formula] of intervals." is hard to parse
because of the formula in the middle of it.

Example t62 and paragraph describing it: "the three loops get their
potential from the same interval" This was unclear because two of the
loops are nested in the third. You should explain further whether
each loop has cost |l-h|, or whether somehow the combination of the
three loops happens to add up to 3|l-h|. Also, the bound is not tight,
is it? It would be helpful to state the tight bound and explain why
the computed bound is not tight.

In section 4, the break and return postconditions were unclear. If
they are postconditions, why are they written before the term with
the preconditions, not after? How does the Q:Loop rule work? Does
Q' mean the postcondition *if* S exits with a break? Then how can
we use Q' as the postcondition if the whole "loop S"? Aren't we
finding an *upper* bound on the cost? What if the break inside
S does not get executed? Then the body of the loop should end
with postcondition Q+M_l. So for the whole loop, don't we need
a bound of max{Q', Q+M_l}? (In addition, we need to somehow
account for multiple iterations of the loop.) This needs to be
explained more clearly and in more detail.

You should say what Clight is (with a citation) the first time
you mention it. It is first mentioned on page 6, but only on
page 8 do you say that it is the langauge for CompCert, and
without a citation.

===========================================================================
                           PLDI '15 Review #41B
                     Updated 10 Dec 2014 5:54:58am EST
---------------------------------------------------------------------------
            Paper #41: Compositional Certified Resource Bounds
---------------------------------------------------------------------------

                      Overall merit: 2. Accept
                         Conviction: 1. High

                         ===== Paper summary =====

This paper describes an automatic method for deriving resource bounds for imperative code.  I am not an expect in resource-bound analysis, but this looks like a solid advance:

- The evaluation compares with existing tools (pleasingly, obtained and run by the authors of this paper) and with published bounds for a number of tricky cases, and it improves on previous work.

- There is a soundness proof (or, at least "the main parts" thereof) formalized in Coq with respect to a cost semantics for the source language.

- The method is automatic but permits the user to add information in ghost state.

- The paper is nicely written.

                      ===== Comments for author =====

You claim that this applies "for C programs", but what you actually deal with seems to be a fragment of the Clight language of CompCert, not general idiomatic C code, so that is really not the case.  It would be better to be more accurate in the claim and explain up-front what aspects of C you do and do not handle.

There is a missing citation for Clight.

===========================================================================
                           PLDI '15 Review #41C
                     Updated 11 Dec 2014 6:37:58pm EST
---------------------------------------------------------------------------
            Paper #41: Compositional Certified Resource Bounds
---------------------------------------------------------------------------

                      Overall merit: 2. Accept
                         Conviction: 2. Low

                         ===== Paper summary =====

This paper proposes a compositional method to derive resource bounds for C programs. The resources in this paper (mainly) refer to computation time.  The idea is to use the linear potential function from amortized analysis to represent resource bound since the amortized analysis model has nice composition property. 

In order to get the resource bound, it only needs to solve for all coefficients of the linear potential function. First, this model derives the resource bound for each strongly connected component in the call graph with predefined inference rules. Then it collects the constraints of coefficients for every SCC. Later, an off-the-shelf linear programming solver is used to find the solution for the collected constraints and obtain the resource bound for the whole program.

                        ===== Points in favor =====

This paper presents an automatic method to find resource-bound. This method can deal with complex situations the previous work cannot, for instance, complex loops and mutually recursive functions.

Finding resource bounds is modeled as a linear programming problem and can be solved by existing linear programming solver.
This method can integrate user interactions in a semi-automatic way.

The evaluation results are good.

                        ===== Points against =====

The authors only test their method for small programs with several hundreds of code lines. Not sure how they would perform for larger programs.

If I understand correctly, this approach chooses linear potential function. I can understand that since it can be conveniently solved by existing linear programming solvers. But if the resource bound of a program is not linear, which is typical for a lot of real-world applications such as sort, how can its resource bound be computed?

                      ===== Comments for author =====

First, please address the questions above. 

Secondly,  it would be good to see some evaluation results for larger and more complex programs. This paper mainly presents results for programs with several hundreds of lines or less. How would the technique scale if the size of a program becomes larger?  

There is a minor issue in the organization of the paper. The authors should introduce the framework briefly at the beginning of the paper. For instance, in Fig. 1, the coefficient T/K of |[x,y]| was given without any explanation and the paper did not specify why there is a 0 for |[y,x]|. I did not find the answer until Section 3 and 5. For audience who are not familiar with this area, it will help if you explain the background a bit more at the beginning of the paper.
