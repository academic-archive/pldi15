1. Clarify why sources are not available.

   I screwed up, and removed the AEC specific links and
   comments from the website too early.  My bad.
       Quentin

2. Explain the problems with robustness.  The main
   problem is that intervals need to be formed from
   two program variables.

        void simple3(int x) {
        for(int i=0; i<x; i+=2) {
        tick(2);
        }
        }
   The interval here is [0, x+1], which cannot be
   tracked by our tool, on needs to change 'i<x' to
   'i<x-1'.  By the way, the suggested bound [0, x]
   is *unsound* for if x==1.

   Similar remarks apply (even the unsoundness) to
   the simple4 example.

   We also do not support equality tests and non-linear
   operations, this would complexify the logic a great
   deal.  So no hope for the following.
        void simple2(int x) {
        for(int i=0; i<x; i++) {
        if(x % 2 == 0) tick(2);
        }
        }

3. Some examples tested by the reviewers have non-linear
   resource cost.  For example the Fibonacci example
   has exponential resource consumption. The following
   example from review 1 is quadratic unless the inner
   loop is executed a constant number of times (as
   observed by the reviewer).
        void start(int *a, int len) {
        int n, m, tmp;
        int len_sub_1 = len - 1;

        assert(len > 0);
        assert(len_sub_1 >= 0);
        n = 1;
        while (n < len) {
        m = 0;
        while (m < len_sub_1) {
        m = m + 1;
        }
        n = n + 1;
        }
        }

------------------------------------------------------
|sed -e 's/^/        /'
>xclip -i



------------------------------------------------------
RESPONSE:

Reviewers 1 & 3 did not see the artifact page as it was originally
submitted: Indeed, we removed an AEC specific box on the website a few
weeks ago, thinking that the reviewers have downloaded our artifact
already. This box contained a link to the artifact VM with all the
examples and source code (and the actual submitted paper).  It is up
again at the same URL.  Reviewer 2 appears to have seen it.

Some examples tested by reviewers are not handled by our analysis by
design (and documented as such).  For example, the paper states that
non-linear arithmetic is not supported (x % 2), and non-linear
programs cannot be bounded by the current C4B (bubblesort has
quadratic complexity, and the recursive Fibonacci function has
exponential complexity).

We want to emphasizes that all bounds generated with C4B by the
reviewers and in the paper are sound.  We can explain the differences
(which are mainly in the constant factors) between our artifact's
output and the paper bounds by several points:

1. The version we submitted in the artifact improves upon the one
we used for writing the submission; it supports more examples.

2. The bound for the example t62 is not tight in the paper, it was
already reported by a paper reviewer.

3. Some examples have bounds that differ by 1 with the paper numbers
because, for simplicity, the cost of the initial function call is not
accounted for in the paper. We only bound the function body.

Finally we would like to point out that, even if the new sha_update
bound is 65 resource units looser with the new version, C4B is the
only tool available that can give *any* bound for it.  No other
resource analysis tool is able to properly deal with simple function
calls in C (let alone recursive functions).
