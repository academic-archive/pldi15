Alice - the manager
Bob - the programmer


-- 1 at ACME Software Inc. --

==== Bubbles
Alice:  Bob! I just got a huuge bill from Google, how
many API calls did you do?

Bob:  It's not my fault, during the tests, the code stayed
within the free quota!
====

Many cloud services start charging after a given number
of API calls per day.

It seems that Bob messed up his estimation of calls to
the Google Maps API and this upsets his manager.

Sometimes you need precise worst-case bounds that you can trust!


-- 2 in Open Skies --

Resource bounds for software are also useful in many other
settings.

For example, embedded systems are often very time sensitive
and should not run out of memory.


-- 3 KNUTH --

Deriving bounds by hand is cumbersome, tricky, and error-prone.

Unfortunately for Bob, Knuth is busy writing a book and currently
not on the job market.


-- 4 C4B --

  This paper presents a new approach for automatically deriving
  worst-case resource bounds for C programs.
  %
  The described technique combines ideas from amortized analysis and
  abstract interpretation in a unified framework to address four
  challenges for state-of-the-art techniques: compositionality, user
  interaction, generation of proof certificates, and scalability.
  %
  \emph{Compositionality} is achieved by incorporating the potential
  method of amortized analysis.  It enables the derivation of global
  whole-program bounds with local derivation rules by naturally
  tracking size changes of variables in sequenced loops and function
  calls.  The resource consumption of functions is described abstractly
  and a function call can be analyzed without access to the function
  body.
  %\
  \emph{User interaction} is supported with a new mechanism that
  clearly separates qualitative and quantitative verification. A user
  can guide the analysis to derive complex non-linear bounds by using
  auxiliary variables and assertions.  The assertions are
  separately proved using established qualitative techniques such as
  abstract interpretation or Hoare logic.
  %
  \emph{Proof certificates} are automatically generated from the local
  derivation rules. A soundness proof of the derivation system with
  respect to a formal cost semantics guarantees the validity of the
  certificates.
  %
  \emph{Scalability} is attained by an efficient reduction of
  bound inference to a linear optimization problem that can be solved
  by off-the-shelf LP solvers.
  %
  The analysis framework is implemented in the publicly-available
  tool $\toolname$. An experimental evaluation demonstrates the
  advantages of the new technique with a comparison of $\toolname$ with
  existing tools on challenging micro benchmarks and the analysis of
  more than $\totalLoc$ lines of C code from the cBench benchmark suite.


-- 5 Demo --

#pragma tick
void f(int x)
{
	int y;

	for (y = 1; x > 0; x--) {
		if (y >= 5) {
			tick(5);
			y = 1;
		} else
			y++;
	}
}
